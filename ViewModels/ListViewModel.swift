func setDeadlineForSelectedTasks(_ deadline: Date) {
    logger.info("üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deadline –¥–ª—è \(self.state.selectedTasks.count) –∑–∞–¥–∞—á: \(deadline)")
    
    let selectedTaskIds = Array(self.state.selectedTasks) // –ö–æ–ø–∏—Ä—É–µ–º —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ clearSelection
    
    Task {
        var successCount = 0
        var errorCount = 0
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for taskId in selectedTaskIds {
            logger.info("üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deadline –¥–ª—è –∑–∞–¥–∞—á–∏: \(taskId)")
            
            guard let task = self.state.items.first(where: { $0.id == taskId }) else {
                logger.warning("‚ùå –ó–∞–¥–∞—á–∞ —Å ID \(taskId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ deadline")
                errorCount += 1
                continue
            }
            
            let updatedTask = ToDoItem(
                id: task.id,
                title: task.title,
                date: task.date,
                isCompleted: task.isCompleted,
                categoryID: task.categoryID,
                categoryName: task.categoryName,
                priority: task.priority,
                deadline: deadline
            )
            
            do {
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É \(taskId) —Å deadline: \(deadline)")
                try await todoDataService.updateTask(updatedTask)
                
                await MainActor.run {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
                    if let index = self.state.items.firstIndex(where: { $0.id == taskId }) {
                        self.state.items[index] = updatedTask
                        logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ \(taskId)")
                    }
                    
                    // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º filteredItems —Ç–æ–∂–µ
                    if let index = self.state.filteredItems.firstIndex(where: { $0.id == taskId }) {
                        self.state.filteredItems[index] = updatedTask
                        logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ \(taskId)")
                    }
                }
                
                successCount += 1
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω deadline –¥–ª—è –∑–∞–¥–∞—á–∏: \(taskId)")
            } catch {
                errorCount += 1
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ deadline –¥–ª—è –∑–∞–¥–∞—á–∏ \(taskId): \(error)")
            }
        }
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º UI
        await MainActor.run {
            logger.info("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ \(successCount), –æ—à–∏–±–æ–∫ \(errorCount)")
            
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            Task {
                do {
                    let freshTasks = try await self.todoDataService.loadTasks(for: self.state.selectedDate)
                    await MainActor.run {
                        self.state.items = freshTasks
                        self.applyCurrentFilters()
                        
                        // üîß –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º selection —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        if successCount > 0 {
                            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                self.state.selectedTasks.removeAll()
                                self.state.isSelectionMode = false
                                self.logger.info("‚úÖ Selection –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                            }
                        }
                        
                        self.logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ deadline –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
                    }
                } catch {
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ deadline: \(error)")
                }
            }
        }
    }
} 