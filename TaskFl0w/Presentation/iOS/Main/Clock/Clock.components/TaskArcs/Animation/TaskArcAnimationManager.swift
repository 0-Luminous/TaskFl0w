//
//  TaskArcAnimationManager.swift
//  TaskFl0w
//
//  Created by Yan on 24/12/24.
//

import SwiftUI

class TaskArcAnimationManager: ObservableObject {
    @Published var appearanceScale: CGFloat = 0.6
    @Published var appearanceOpacity: Double = 1.0
    @Published var appearanceRotation: Double = 0.0
    @Published var hasAppeared: Bool = false
    @Published var isPressed: Bool = false
    
    func startAppearanceAnimation() {
        guard !hasAppeared else { return }
        hasAppeared = true
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        appearanceScale = 0.0
        appearanceOpacity = 0.0
        appearanceRotation = -15.0
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        DispatchQueue.main.asyncAfter(deadline: .now() + TaskArcConstants.appearanceDelay) {
            withAnimation(.interpolatingSpring(stiffness: 300, damping: 20)) {
                self.appearanceScale = 1.0
                self.appearanceOpacity = 1.0
                self.appearanceRotation = 0.0
            }
        }
    }
    
    func startDisappearanceAnimation(completion: @escaping () -> Void) {
        print("üé¨ DEBUG: startDisappearanceAnimation –∑–∞–ø—É—â–µ–Ω–∞")
        
        // –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º
        withAnimation(.easeInOut(duration: 0.6)) {
            appearanceScale = 0.0
            appearanceOpacity = 0.0
            appearanceRotation = 360.0 // –ü–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.6) {
            print("üé¨ DEBUG: –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            completion()
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    func startAnimatedRemoval(task: TaskOnRing, taskManagement: TaskManagementProtocol) {
        print("üóëÔ∏è DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: \(task.id)")
        
        startDisappearanceAnimation {
            print("üóëÔ∏è DEBUG: –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            taskManagement.removeTask(task)
        }
    }
    
    func triggerPressAnimation() {
        withAnimation(.easeOut(duration: TaskArcConstants.pressAnimationDuration)) {
            isPressed = true
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + TaskArcConstants.pressAnimationDelay) {
            withAnimation(.easeIn(duration: TaskArcConstants.pressAnimationDuration)) {
                self.isPressed = false
            }
        }
    }
    
    var currentScale: CGFloat {
        appearanceScale * (isPressed ? TaskArcConstants.pressScale : 1.0)
    }
}

extension Notification.Name {
    static let startTaskRemovalAnimation = Notification.Name("startTaskRemovalAnimation")
} 