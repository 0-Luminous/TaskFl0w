//
//  RingPlanner.swift
//  TaskFl0w
//
//  Created by Yan on 31/3/25.
//

import Foundation
import SwiftUI
import CoreData

struct RingPlanner: View {
    let color: Color
    @ObservedObject var viewModel: ClockViewModel
    let zeroPosition: Double
    let shouldDeleteTask: Bool
    let outerRingLineWidth: CGFloat
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º shouldDeleteTask, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    init(color: Color, viewModel: ClockViewModel, zeroPosition: Double, shouldDeleteTask: Bool = true, outerRingLineWidth: CGFloat) {
        self.color = color
        self.viewModel = viewModel
        self.zeroPosition = zeroPosition
        self.shouldDeleteTask = shouldDeleteTask
        self.outerRingLineWidth = outerRingLineWidth
    }

    // MARK: - Constants
    private enum Constants {
        static let defaultTaskDuration: TimeInterval = 3600 // 1 —á–∞—Å
        static let categoryValidationDelay: TimeInterval = 0.1
        static let taskCreationDelay: TimeInterval = 0.2
        static let previewOpacity: Double = 0.7
        static let dropZoneSize: CGFloat = 20 // –†–∞–∑–º–µ—Ä –∑–æ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è
    }

    // MARK: - State
    @State private var isTargeted: Bool = false
    @State private var dragLocation: CGPoint?
    @State private var isTransformingToArc: Bool = false
    
    var body: some View {
        ZStack {
            Circle()
                .stroke(color, lineWidth: outerRingLineWidth)
                .frame(
                    width: UIScreen.main.bounds.width * 0.8,
                    height: UIScreen.main.bounds.width * 0.8
                )
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º previewTask —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if let previewTask = viewModel.previewTask {
                GeometryReader { geometry in
                    let center = CGPoint(x: geometry.size.width / 2, y: geometry.size.height / 2)
                    let radius = min(geometry.size.width, geometry.size.height) / 2
                    let configuration = TaskArcConfiguration(
                        isAnalog: viewModel.isAnalogArcStyle,
                        arcLineWidth: viewModel.taskArcLineWidth,
                        outerRingLineWidth: viewModel.outerRingLineWidth,
                        isEditingMode: false,
                        showTimeOnlyForActiveTask: viewModel.showTimeOnlyForActiveTask
                    )
                    let taskGeometry = TaskArcGeometry(
                        center: center,
                        radius: radius,
                        configuration: configuration,
                        task: previewTask
                    )
                    
                    if isTransformingToArc {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TaskArcShape —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                        TaskArcContentView(
                            task: previewTask,
                            viewModel: viewModel,
                            geometry: taskGeometry,
                            configuration: configuration,
                            animationManager: TaskArcAnimationManager(),
                            gestureHandler: TaskArcGestureHandler(viewModel: viewModel, task: previewTask),
                            hapticsManager: HapticsManager(),
                            timeFormatter: {
                                let formatter = DateFormatter()
                                formatter.timeStyle = .short
                                formatter.dateStyle = .none
                                return formatter
                            }(),
                            isDragging: .constant(false)
                        )
                        .transition(.opacity.combined(with: .scale))
                    } else {
                        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ CategoryPreviewShape
                        CategoryPreviewShape(
                            category: viewModel.draggedCategory,
                            color: previewTask.category.color
                        )
                        .frame(width: 60, height: 60)
                    }
                }
                .opacity(Constants.previewOpacity)
            }
        }
        .onDrop(of: [.text], delegate: RingPlannerDropDelegate(
            isTargeted: $isTargeted,
            dragLocation: $dragLocation,
            onDragEntered: { location in
                withAnimation(.spring()) {
                    isTransformingToArc = true
                }
                handleDragEntered(at: location)
            },
            onDragExited: {
                withAnimation(.spring()) {
                    isTransformingToArc = false
                }
                handleDragExited()
            }
        ))
    }
    
    // MARK: - Private Methods
    
    private func handleDragEntered(at location: CGPoint) {
        guard let category = viewModel.draggedCategory else { return }
        
        do {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
            let newPreviewTask = try createPreviewTask(for: category, at: location)
            
            Task { @MainActor in
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –Ω—É–ª–µ–≤–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                self.viewModel.previewTask = newPreviewTask
                
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                if try await checkCategoryExists(category) {
                    try? await self.createTaskWithAnimation(newPreviewTask)
                } else {
                    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    self.viewModel.categoryManagement.addCategory(category)
                    try? await self.createTaskWithAnimation(newPreviewTask)
                }
            }
        } catch {
            print("‚ùå DEBUG: Error in handleDragEntered: \(error)")
        }
    }
    
    private func handleDragExited() {
        Task { @MainActor in
            self.viewModel.previewTask = nil
        }
    }
    
    private func createTaskWithAnimation(_ task: TaskOnRing) async throws {
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \(task.startTime) - \(task.endTime)")
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        try await viewModel.taskManagement.createTask(
            startTime: task.startTime,
            endTime: task.endTime,
            category: task.category
        )
        
        print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        await MainActor.run {
            withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                if let createdTask = viewModel.tasks.first(where: { 
                    $0.startTime == task.startTime && 
                    $0.endTime == task.endTime && 
                    $0.category == task.category 
                }) {
                    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π
                    self.viewModel.isEditingMode = true
                    self.viewModel.editingTask = createdTask
                }
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                self.viewModel.previewTask = nil
            }
            print("‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω")
        }
    }
    
    private func checkCategoryExists(_ category: TaskCategoryModel) throws -> Bool {
        let categoryRequest = NSFetchRequest<CategoryEntity>(entityName: "CategoryEntity")
        categoryRequest.predicate = NSPredicate(format: "id == %@", category.id as CVarArg)
        categoryRequest.fetchLimit = 1 // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
        
        let count = try viewModel.sharedState.context.count(for: categoryRequest)
        return count > 0
    }
    
    private func createPreviewTask(for category: TaskCategoryModel, at location: CGPoint) throws -> TaskOnRing {
        let time = viewModel.clockState.timeForLocation(
            location,
            screenWidth: UIScreen.main.bounds.width
        )
        
        let adjustedTime = try createAdjustedTime(from: time)
        let endTime = adjustedTime.addingTimeInterval(Constants.defaultTaskDuration)
        
        return TaskOnRing(
            id: UUID(),
            startTime: adjustedTime,
            endTime: endTime,
            color: category.color,
            icon: category.iconName,
            category: category,
            isCompleted: false
        )
    }
    
    private func createAdjustedTime(from time: Date) throws -> Date {
        let calendar = Calendar.current
        var dateComponents = calendar.dateComponents([.year, .month, .day], from: viewModel.selectedDate)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: time)
        
        dateComponents.hour = timeComponents.hour
        dateComponents.minute = timeComponents.minute
        
        guard let adjustedTime = calendar.date(from: dateComponents) else {
            throw TaskCreationError.invalidTimeComponents
        }
        
        return adjustedTime
    }
}

// MARK: - Error Handling

enum TaskCreationError: LocalizedError {
    case invalidTimeComponents
    case categoryNotFound
    case contextSaveError
    case taskNotCreated
    
    var errorDescription: String? {
        switch self {
        case .invalidTimeComponents:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
        case .categoryNotFound:
            return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        case .contextSaveError:
            return "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Core Data"
        case .taskNotCreated:
            return "–ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞"
        }
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
struct CategoryPreviewShape: View {
    let category: TaskCategoryModel?
    let color: Color
    
    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12)
                .fill(color) // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–≤–µ—Ç–æ–º –∑–¥–µ—Å—å
            Image(systemName: category?.iconName ?? "")
                .foregroundColor(.white)
                .font(.system(size: 24))
        }
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–µ–ª–µ–≥–∞—Ç–∞
protocol CustomDropDelegate {
    var isTargeted: Bool { get set }
    var dragLocation: CGPoint? { get set }
    func onDragEntered(_ location: CGPoint)
    func onDragExited()
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
struct RingPlannerDropDelegate: DropDelegate {
    @Binding var isTargeted: Bool
    @Binding var dragLocation: CGPoint?
    let onDragEntered: (CGPoint) -> Void
    let onDragExited: () -> Void
    
    func dropEntered(info: DropInfo) {
        isTargeted = true
        dragLocation = info.location
        onDragEntered(info.location)
    }
    
    func dropExited(info: DropInfo) {
        isTargeted = false
        dragLocation = nil
        onDragExited()
    }
    
    func performDrop(info: DropInfo) -> Bool {
        dragLocation = nil
        isTargeted = false
        return true
    }
    
    // –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ DropDelegate
    func validateDrop(info: DropInfo) -> Bool {
        return true
    }
}


