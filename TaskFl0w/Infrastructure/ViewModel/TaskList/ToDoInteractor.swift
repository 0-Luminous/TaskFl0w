import CoreData
//
//  ToDoInteractor.swift
//  ToDoList
//
//  Created by Yan on 19/3/25.
//
import Foundation

class ToDoInteractor: ToDoInteractorProtocol {
    weak var presenter: ToDoPresenterProtocol?
    private let viewContext = PersistenceController.shared.container.viewContext

    init() {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        print("üîß ToDoInteractor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CoreData –æ–±—ä–µ–∫—Ç –≤ ToDoItem
    private func convertToToDoItem(_ entity: NSManagedObject) -> ToDoItem {
        let id = entity.value(forKey: "id") as! UUID
        let title = entity.value(forKey: "title") as! String
        let content = entity.value(forKey: "content") as! String
        let date = entity.value(forKey: "date") as! Date
        let isCompleted = entity.value(forKey: "isCompleted") as! Bool
        let categoryID = entity.value(forKey: "categoryID") as? UUID
        let categoryName = entity.value(forKey: "categoryName") as? String

        return ToDoItem(
            id: id, title: title, content: content, date: date, 
            isCompleted: isCompleted, categoryID: categoryID, categoryName: categoryName)
    }

    func fetchItems() {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")

        do {
            let result = try viewContext.fetch(request)
            let items = result.map { convertToToDoItem($0) }
            presenter?.didFetchItems(ToDoItem: items)
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: \(error)")
            presenter?.didFetchItems(ToDoItem: [])
        }
    }

    func addItem(title: String, content: String) {
        print("üìù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: \(title)")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
        guard let entity = NSEntityDescription.entity(forEntityName: "CDToDoItem", in: viewContext)
        else {
            print("‚ùå –û—à–∏–±–∫–∞: —Å—É—â–Ω–æ—Å—Ç—å CDToDoItem –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ CoreData")
            return
        }

        print("‚úÖ –°—É—â–Ω–æ—Å—Ç—å CDToDoItem –Ω–∞–π–¥–µ–Ω–∞")
        let newItem = NSManagedObject(entity: entity, insertInto: viewContext)

        let newID = UUID()
        newItem.setValue(newID, forKey: "id")
        newItem.setValue(title, forKey: "title")
        newItem.setValue(content, forKey: "content")
        newItem.setValue(Date(), forKey: "date")
        newItem.setValue(false, forKey: "isCompleted")

        print("üìù –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ID=\(newID), title=\(title)")

        saveContext()
        print("üîÑ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞")
        presenter?.didAddItem()
    }

    func addItemWithCategory(title: String, content: String, category: TaskCategoryModel) {
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: \"\(title)\" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \"\(category.rawValue)\"")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
        guard let entity = NSEntityDescription.entity(forEntityName: "CDToDoItem", in: viewContext) else {
            print("‚ùå –û—à–∏–±–∫–∞: —Å—É—â–Ω–æ—Å—Ç—å CDToDoItem –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ CoreData")
            return
        }

        print("‚úÖ –°—É—â–Ω–æ—Å—Ç—å CDToDoItem –Ω–∞–π–¥–µ–Ω–∞")
        let newItem = NSManagedObject(entity: entity, insertInto: viewContext)

        let newID = UUID()
        newItem.setValue(newID, forKey: "id")
        newItem.setValue(title, forKey: "title")
        newItem.setValue(content, forKey: "content")
        newItem.setValue(Date(), forKey: "date")
        newItem.setValue(false, forKey: "isCompleted")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        newItem.setValue(category.id, forKey: "categoryID")
        newItem.setValue(category.rawValue, forKey: "categoryName")

        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID=\(newID), title=\"\(title)\", –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏=\"\(category.rawValue)\"")

        saveContext()
        presenter?.didAddItem()
    }

    func deleteItem(id: UUID) {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)

        do {
            let items = try viewContext.fetch(request)
            if let itemToDelete = items.first {
                viewContext.delete(itemToDelete)
                saveContext()
            }
            presenter?.didDeleteItem()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: \(error)")
        }
    }

    func toggleItem(id: UUID) {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)

        do {
            let items = try viewContext.fetch(request)
            if let item = items.first {
                let currentStatus = item.value(forKey: "isCompleted") as! Bool
                item.setValue(!currentStatus, forKey: "isCompleted")
                saveContext()
                presenter?.didToggleItem()
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: \(error)")
        }
    }

    func searchItems(query: String) {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")

        if !query.isEmpty {
            request.predicate = NSPredicate(
                format: "title CONTAINS[c] %@ OR content CONTAINS[c] %@",
                query, query
            )
        }

        do {
            let result = try viewContext.fetch(request)
            let items = result.map { convertToToDoItem($0) }
            presenter?.didFetchItems(ToDoItem: items)
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: \(error)")
            presenter?.didFetchItems(ToDoItem: [])
        }
    }

    func editItem(id: UUID, title: String, content: String) {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)

        do {
            let items = try viewContext.fetch(request)
            if let item = items.first {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                let oldCategoryID = item.value(forKey: "categoryID") as? UUID
                let oldCategoryName = item.value(forKey: "categoryName") as? String
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                item.setValue(title, forKey: "title")
                item.setValue(content, forKey: "content")
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ viewModel, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                if let presenter = presenter as? ToDoPresenter,
                   let view = presenter.view as? ListViewModel,
                   let selectedCategory = view.selectedCategory {
                    item.setValue(selectedCategory.id, forKey: "categoryID")
                    item.setValue(selectedCategory.rawValue, forKey: "categoryName")
                    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: \(selectedCategory.rawValue)")
                } else if oldCategoryID != nil && oldCategoryName != nil {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
                    item.setValue(oldCategoryID, forKey: "categoryID")
                    item.setValue(oldCategoryName, forKey: "categoryName")
                    print("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–µ–∂–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: \(oldCategoryName ?? "–ë–µ–∑ –∏–º–µ–Ω–∏")")
                } else {
                    // –û—á–∏—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    item.setValue(nil, forKey: "categoryID")
                    item.setValue(nil, forKey: "categoryName")
                    print("üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω–∞")
                }
                
                saveContext()
                fetchItems()
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: \(error)")
        }
    }

    func getItem(id: UUID) -> ToDoItem? {
        let request = NSFetchRequest<NSManagedObject>(entityName: "CDToDoItem")
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)

        do {
            let items = try viewContext.fetch(request)
            if let item = items.first {
                return convertToToDoItem(item)
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: \(error)")
        }

        return nil
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    private func saveContext() {
        do {
            if viewContext.hasChanges {
                try viewContext.save()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CoreData")
            } else {
                print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CoreData")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: \(error)")
            // –î–æ–±–∞–≤–∏–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if let nserror = error as NSError? {
                print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ: \(nserror.userInfo)")
            }
        }
    }
}
