//
//  ListViewModel.swift
//  TaskFl0w
//
//  Created by Yan on 25/3/25.
//

import Combine
import Foundation
import SwiftUI

class ListViewModel: ObservableObject, ToDoViewProtocol {
    @Published var items: [ToDoItem] = []
    @Published var searchText: String = "" {
        didSet {
            presenter?.handleSearch(query: searchText)
        }
    }
    @Published var isAddingNewItem: Bool = false
    @Published var editingItem: ToDoItem? = nil
    @Published var selectedCategory: TaskCategoryModel? = nil
    @Published var showCompletedTasksOnly: Bool = false
    @Published var selectedTasks: Set<UUID> = []
    @Published var isSelectionMode: Bool = false
    
    var presenter: ToDoPresenterProtocol?

    init(selectedCategory: TaskCategoryModel? = nil) {
        self.selectedCategory = selectedCategory
        self.presenter = ToDoPresenter(view: self)
        presenter?.viewDidLoad()
    }

    func displayItems(_ items: [ToDoItem]) {
        DispatchQueue.main.async {
            self.items = items
        }
    }

    func onViewDidLoad() {
        print("üöÄ ContentViewModel: onViewDidLoad –≤—ã–∑–≤–∞–Ω")
        presenter?.viewDidLoad()
    }

    func refreshData() {
        print("üîÑ ContentViewModel: refreshData –≤—ã–∑–≤–∞–Ω")
        presenter?.refreshItems()
    }

    func showAddNewItemForm() {
        DispatchQueue.main.async {
            self.isAddingNewItem = true
        }
    }
    
    func hideAddNewItemForm() {
        DispatchQueue.main.async {
            self.isAddingNewItem = false
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    func saveNewTask(title: String) {
        if !title.isEmpty {
            if let category = selectedCategory {
                presenter?.addItemWithCategory(
                    title: title,
                    category: category
                )
            } else {
                presenter?.addItem(
                    title: title
                )
            }
        }
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
    func getFilteredItems() -> [ToDoItem] {
        var filteredItems: [ToDoItem]
        
        // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
        if let selectedCategory = selectedCategory {
            filteredItems = items.filter { item in
                item.categoryID == selectedCategory.id
            }
        } else {
            filteredItems = items
        }
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if showCompletedTasksOnly {
            filteredItems = filteredItems.filter { item in
                item.isCompleted
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        return filteredItems.sorted { (item1, item2) -> Bool in
            // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if showCompletedTasksOnly {
                // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                if item1.priority != item2.priority {
                    return item1.priority.rawValue > item2.priority.rawValue
                }
                
                // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                // (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                return item1.date > item2.date
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–π, –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–¥—É—Ç –≤–Ω–∞—á–∞–ª–µ
                if item1.isCompleted != item2.isCompleted {
                    return !item1.isCompleted
                }
                
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                return item1.priority.rawValue > item2.priority.rawValue
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    func toggleTaskSelection(taskId: UUID) {
        if selectedTasks.contains(taskId) {
            selectedTasks.remove(taskId)
        } else {
            selectedTasks.insert(taskId)
        }
    }
    
    func deleteSelectedTasks() {
        for taskId in selectedTasks {
            presenter?.deleteItem(id: taskId)
        }
        // –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        selectedTasks.removeAll()
    }
    
    func unarchiveSelectedTasks() {
        for taskId in selectedTasks {
            presenter?.toggleItem(id: taskId)
        }
        selectedTasks.removeAll()
    }
    
    func setPriorityForSelectedTasks(_ priority: TaskPriority) {
        for taskId in selectedTasks {
            presenter?.changePriority(id: taskId, priority: priority)
        }
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        isSelectionMode = false
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    func getPriorityColor(for priority: TaskPriority) -> Color {
        switch priority {
        case .high:
            return Color.red
        case .medium:
            return Color.orange
        case .low:
            return Color.green
        case .none:
            return Color.gray
        }
    }

    func priorityIcon(for priority: TaskPriority) -> String {
        switch priority {
        case .high:
            return "exclamationmark.triangle.fill"
        case .medium:
            return "exclamationmark.circle.fill"
        case .low:
            return "arrow.up.circle.fill"
        case .none:
            return "list.bullet"
        }
    }

    func getPriorityText(for priority: TaskPriority) -> String {
        switch priority {
        case .high:
            return "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        case .medium:
            return "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        case .low:
            return "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        case .none:
            return "–ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"
        }
    }
}
