//
//  FeatureFlags.swift
//  TaskFl0w
//
//  Created by Refactoring on 19/01/25.
//

import Foundation

/// –°–∏—Å—Ç–µ–º–∞ feature flags –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
struct FeatureFlags {
    
    // MARK: - Architecture Flags
    
    /// –í–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—É—é Redux-–ø–æ–¥–æ–±–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ClockViewModel
    static var modernClockArchitecture: Bool {
        get {
            UserDefaults.standard.bool(forKey: "feature_modern_clock_architecture")
        }
        set {
            UserDefaults.standard.set(newValue, forKey: "feature_modern_clock_architecture")
            NotificationCenter.default.post(
                name: .modernArchitectureToggled,
                object: nil,
                userInfo: ["enabled": newValue]
            )
        }
    }
    
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç debug UI –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
    static var showArchitectureToggle: Bool {
        #if DEBUG
        return true
        #else
        return UserDefaults.standard.bool(forKey: "feature_show_architecture_toggle")
        #endif
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    static var verboseArchitectureLogging: Bool {
        #if DEBUG
        return UserDefaults.standard.bool(forKey: "feature_verbose_architecture_logging")
        #else
        return false
        #endif
    }
    
    // MARK: - Performance Flags
    
    /// –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
    static var performanceMetrics: Bool {
        get {
            UserDefaults.standard.bool(forKey: "feature_performance_metrics")
        }
        set {
            UserDefaults.standard.set(newValue, forKey: "feature_performance_metrics")
        }
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
    static var abTestingEnabled: Bool {
        get {
            UserDefaults.standard.bool(forKey: "feature_ab_testing_enabled")
        }
        set {
            UserDefaults.standard.set(newValue, forKey: "feature_ab_testing_enabled")
        }
    }
    
    // MARK: - Development Flags
    
    /// –í–∫–ª—é—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
    static var experimentalFeatures: Bool {
        #if DEBUG
        return true
        #else
        return UserDefaults.standard.bool(forKey: "feature_experimental_features")
        #endif
    }
    
    // MARK: - Helper Methods
    
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ feature flags –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    static func resetToDefaults() {
        let keys = [
            "feature_modern_clock_architecture",
            "feature_show_architecture_toggle",
            "feature_verbose_architecture_logging",
            "feature_performance_metrics",
            "feature_ab_testing_enabled",
            "feature_experimental_features"
        ]
        
        for key in keys {
            UserDefaults.standard.removeObject(forKey: key)
        }
        
        print("üîÑ [FeatureFlags] Reset to defaults")
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    static func enableAllDevelopmentFlags() {
        #if DEBUG
        modernClockArchitecture = true
        performanceMetrics = true
        
        print("üöÄ [FeatureFlags] All development flags enabled")
        #endif
    }
    
    /// –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ (safe mode)
    static func disableAllExperimentalFlags() {
        modernClockArchitecture = false
        performanceMetrics = false
        
        print("üõ°Ô∏è [FeatureFlags] Safe mode activated")
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    static func debugInfo() -> String {
        return """
        üèÅ Feature Flags Status:
        
        Architecture:
        ‚Ä¢ Modern Clock Architecture: \(modernClockArchitecture ? "‚úÖ" : "‚ùå")
        ‚Ä¢ Show Architecture Toggle: \(showArchitectureToggle ? "‚úÖ" : "‚ùå")
        ‚Ä¢ Verbose Logging: \(verboseArchitectureLogging ? "‚úÖ" : "‚ùå")
        
        Performance:
        ‚Ä¢ Performance Metrics: \(performanceMetrics ? "‚úÖ" : "‚ùå")
        ‚Ä¢ A/B Testing: \(abTestingEnabled ? "‚úÖ" : "‚ùå")
        
        Development:
        ‚Ä¢ Experimental Features: \(experimentalFeatures ? "‚úÖ" : "‚ùå")
        """
    }
}

// MARK: - Notification Names

extension Notification.Name {
    static let modernArchitectureToggled = Notification.Name("modernArchitectureToggled")
    static let featureFlagChanged = Notification.Name("featureFlagChanged")
}

// MARK: - Development Helper

#if DEBUG
extension FeatureFlags {
    /// –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    static func toggleModernArchitecture() {
        modernClockArchitecture.toggle()
        print("üîÑ [FeatureFlags] Modern Architecture: \(modernClockArchitecture ? "ON" : "OFF")")
    }
}
#endif 