//
//  ErrorHandler.swift
//  TaskFl0w
//
//  Created by Yan on 24/12/24.
//

import Foundation
import SwiftUI
import OSLog

// MARK: - App Error Types
enum AppError: Error, LocalizedError {
    case dataLoadFailed(String)
    case dataSaveFailed(String)
    case networkError(String)
    case validationError(String)
    case configurationError(String)
    case userPermissionDenied(String)
    case unknownError(String)
    
    var errorDescription: String? {
        switch self {
        case .dataLoadFailed(let message):
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(message)"
        case .dataSaveFailed(let message):
            return "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: \(message)"
        case .networkError(let message):
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(message)"
        case .validationError(let message):
            return "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: \(message)"
        case .configurationError(let message):
            return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: \(message)"
        case .userPermissionDenied(let message):
            return "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏: \(message)"
        case .unknownError(let message):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(message)"
        }
    }
    
    var recoveryOptions: [String] {
        switch self {
        case .dataLoadFailed, .dataSaveFailed:
            return ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]
        case .networkError:
            return ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–†–∞–±–æ—Ç–∞—Ç—å –æ—Ñ–ª–∞–π–Ω", "–û—Ç–º–µ–Ω–∞"]
        case .validationError:
            return ["–ò—Å–ø—Ä–∞–≤–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]
        case .configurationError:
            return ["–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–û—Ç–º–µ–Ω–∞"]
        case .userPermissionDenied:
            return ["–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–û—Ç–º–µ–Ω–∞"]
        case .unknownError:
            return ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]
        }
    }
}

// MARK: - Error Context
struct ErrorContext {
    let source: String
    let operation: String
    let userInfo: [String: Any]
    let timestamp: Date
    
    init(source: String, operation: String, userInfo: [String: Any] = [:]) {
        self.source = source
        self.operation = operation
        self.userInfo = userInfo
        self.timestamp = Date()
    }
}

// MARK: - Error Handler Protocol
protocol ErrorHandlerProtocol {
    func handle(_ error: Error, context: ErrorContext)
    func handle(_ error: AppError, context: ErrorContext)
    func logError(_ error: Error, context: ErrorContext)
    func showUserError(_ error: Error, context: ErrorContext)
}

// MARK: - Error Handler Implementation
@MainActor
final class ErrorHandler: ErrorHandlerProtocol, ObservableObject {
    
    // MARK: - Singleton
    static let shared = ErrorHandler()
    
    // MARK: - Published Properties
    @Published var currentError: (error: AppError, context: ErrorContext)?
    @Published var isShowingError = false
    
    // MARK: - Private Properties
    private let logger = Logger(subsystem: "TaskFl0w", category: "ErrorHandler")
    
    // MARK: - Initialization
    private init() {}
    
    // MARK: - Protocol Implementation
    func handle(_ error: Error, context: ErrorContext) {
        logError(error, context: context)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ AppError –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        let appError: AppError
        if let error = error as? AppError {
            appError = error
        } else {
            appError = .unknownError(error.localizedDescription)
        }
        
        handle(appError, context: context)
    }
    
    func handle(_ error: AppError, context: ErrorContext) {
        logError(error, context: context)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        switch error {
        case .userPermissionDenied, .validationError:
            // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            showUserError(error, context: context)
        case .networkError, .dataLoadFailed:
            // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è UI
            if shouldShowToUser(context: context) {
                showUserError(error, context: context)
            }
        case .dataSaveFailed, .configurationError:
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            showUserError(error, context: context)
        case .unknownError:
            // –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–æ–Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            if !context.operation.contains("background") {
                showUserError(error, context: context)
            }
        }
    }
    
    func logError(_ error: Error, context: ErrorContext) {
        let errorMessage = """
        üö® Error in \(context.source).\(context.operation):
        üìù Message: \(error.localizedDescription)
        ‚è∞ Time: \(context.timestamp)
        üìä UserInfo: \(context.userInfo)
        """
        
        logger.error("\(errorMessage)")
        
        // –í debug mode —Ç–∞–∫–∂–µ –ø–µ—á–∞—Ç–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        #if DEBUG
        print(errorMessage)
        #endif
    }
    
    func showUserError(_ error: Error, context: ErrorContext) {
        let appError: AppError
        if let error = error as? AppError {
            appError = error
        } else {
            appError = .unknownError(error.localizedDescription)
        }
        
        currentError = (appError, context)
        isShowingError = true
    }
    
    // MARK: - Private Methods
    private func shouldShowToUser(context: ErrorContext) -> Bool {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        let criticalOperations = ["save", "load", "sync", "authenticate"]
        return criticalOperations.contains { context.operation.lowercased().contains($0) }
    }
    
    // MARK: - Public Methods
    func dismissCurrentError() {
        currentError = nil
        isShowingError = false
    }
    
    func executeRecoveryAction(_ action: String, for error: AppError, context: ErrorContext) {
        switch action {
        case "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å":
            handleRetryAction(for: error, context: context)
        case "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
            handleResetSettingsAction()
        case "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
            handleOpenSettingsAction()
        case "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
            handleRestartAction()
        default:
            dismissCurrentError()
        }
    }
    
    private func handleRetryAction(for error: AppError, context: ErrorContext) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: \(context.operation)")
        dismissCurrentError()
    }
    
    private func handleResetSettingsAction() {
        // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        UserDefaults.standard.removeObject(forKey: "clockStyle")
        UserDefaults.standard.removeObject(forKey: "themeMode")
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        dismissCurrentError()
    }
    
    private func handleOpenSettingsAction() {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(settingsUrl)
        }
        dismissCurrentError()
    }
    
    private func handleRestartAction() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        dismissCurrentError()
    }
}

// MARK: - Convenience Extensions
extension ErrorHandler {
    
    func handleDataError(_ error: Error, in source: String, operation: String = "data operation") {
        let context = ErrorContext(source: source, operation: operation)
        let appError = AppError.dataLoadFailed(error.localizedDescription)
        handle(appError, context: context)
    }
    
    func handleNetworkError(_ error: Error, in source: String) {
        let context = ErrorContext(source: source, operation: "network request")
        let appError = AppError.networkError(error.localizedDescription)
        handle(appError, context: context)
    }
    
    func handleValidationError(_ message: String, in source: String) {
        let context = ErrorContext(source: source, operation: "validation")
        let appError = AppError.validationError(message)
        handle(appError, context: context)
    }
} 