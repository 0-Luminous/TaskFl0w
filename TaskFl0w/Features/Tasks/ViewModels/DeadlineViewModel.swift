//
//  DeadlineViewModel.swift
//  TaskFl0w
//
//  Created by AI Assistant on 12/26/25.
//

import SwiftUI
import UserNotifications
import Foundation

@MainActor
class DeadlineViewModel: ObservableObject {
    
    // MARK: - Published Properties
    @Published var selectedDate: Date
    @Published var showingContent = false
    @Published var selectedTime = Date()
    @Published var hasReminder = false
    @Published var selectedReminderOption = "–Ω–µ—Ç"
    @Published var currentDeadline: Date?
    @Published var notificationPermissionGranted = false
    
    // MARK: - Properties
    let selectedTasksCount: Int
    let selectedTasks: [SelectedTaskInfo]
    let existingDeadline: Date?
    let onSetDeadlineForTasks: (Date?) -> Void
    let hapticsManager = HapticsManager.shared
    
    // MARK: - Constants
    let reminderOptions = [
        "–Ω–µ—Ç", "–∑–∞ 5 –º–∏–Ω—É—Ç", "–∑–∞ 10 –º–∏–Ω—É—Ç", "–∑–∞ 15 –º–∏–Ω—É—Ç", "–∑–∞ 20 –º–∏–Ω—É—Ç", 
        "–∑–∞ 30 –º–∏–Ω—É—Ç", "–∑–∞ 1 —á–∞—Å", "–∑–∞ 2 —á–∞—Å–∞", "–∑–∞ 1 –¥–µ–Ω—å", "–∑–∞ 2 –¥–Ω—è"
    ]
    
    // MARK: - Computed Properties
    var timePickerDateRange: ClosedRange<Date> {
        let calendar = Calendar.current
        let now = Date()
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
        if calendar.isDate(selectedDate, inSameDayAs: now) {
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ø–ª—é—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            let minTime = calendar.date(byAdding: .minute, value: 1, to: now) ?? now
            
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - –∫–æ–Ω–µ—Ü –¥–Ω—è
            let endOfDay = calendar.date(bySettingHour: 23, minute: 59, second: 59, of: selectedDate) ?? selectedDate
            
            return minTime...endOfDay
        } else {
            // –î–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç - –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
            let startOfDay = calendar.date(bySettingHour: 0, minute: 0, second: 0, of: selectedDate) ?? selectedDate
            let endOfDay = calendar.date(bySettingHour: 23, minute: 59, second: 59, of: selectedDate) ?? selectedDate
            
            return startOfDay...endOfDay
        }
    }
    
    // MARK: - Initialization
    init(
        selectedDate: Date,
        selectedTasksCount: Int,
        selectedTasks: [SelectedTaskInfo],
        existingDeadline: Date?,
        onSetDeadlineForTasks: @escaping (Date?) -> Void
    ) {
        self.selectedDate = selectedDate
        self.selectedTasksCount = selectedTasksCount
        self.selectedTasks = selectedTasks
        self.existingDeadline = existingDeadline
        self.onSetDeadlineForTasks = onSetDeadlineForTasks
    }
    
    // MARK: - Lifecycle Methods
    func onAppear() {
        withAnimation(.easeOut(duration: 0.4)) {
            showingContent = true
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º currentDeadline
        currentDeadline = existingDeadline
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π deadline, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç –Ω–µ–≥–æ
        if let existingDeadline = existingDeadline {
            selectedTime = existingDeadline
        } else {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            setDefaultTime()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        checkNotificationPermission()
    }
    
    func onSelectedDateChanged(_ newValue: Date) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –Ω–æ–≤–æ–π –¥–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        let calendar = Calendar.current
        let now = Date()
        
        if calendar.isDate(newValue, inSameDayAs: now) {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
            if selectedTime <= now {
                selectedTime = calendar.date(byAdding: .hour, value: 1, to: now) ?? now
            }
        }
    }
    
    // MARK: - Action Methods
    func toggleReminder() {
        hapticsManager.triggerLightFeedback()
        if !hasReminder {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏
            requestNotificationPermission { [weak self] granted in
                DispatchQueue.main.async {
                    self?.notificationPermissionGranted = granted
                    if granted {
                        withAnimation(.easeInOut(duration: 0.3)) {
                            self?.hasReminder.toggle()
                        }
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                        self?.showNotificationPermissionAlert()
                    }
                }
            }
        } else {
            withAnimation(.easeInOut(duration: 0.3)) {
                hasReminder.toggle()
            }
        }
    }
    
    func selectReminderOption(_ option: String) {
        hapticsManager.triggerLightFeedback()
        selectedReminderOption = option
    }
    
    func cancelReminder() {
        hapticsManager.triggerLightFeedback()
        withAnimation(.easeInOut(duration: 0.3)) {
            hasReminder = false
        }
    }
    
    func setDeadlineWithReminder() {
        hapticsManager.triggerMediumFeedback()
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É deadline
        let baseDate = combineDateAndTime(date: selectedDate, time: selectedTime)
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        removeExistingNotifications()
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        createNotificationForDeadline(baseDate: baseDate, reminderOption: selectedReminderOption)
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        onSetDeadlineForTasks(baseDate)
    }
    
    func setDeadlineWithoutReminder() {
        hapticsManager.triggerMediumFeedback()
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        removeExistingNotifications()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞–ø—Ä—è–º—É—é
        let finalDate = selectedDate
        
        // –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        onSetDeadlineForTasks(finalDate)
    }
    
    func resetDeadline() {
        hapticsManager.triggerMediumFeedback()
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á
        removeExistingNotifications()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π deadline
        currentDeadline = nil
        
        // –í—ã–∑—ã–≤–∞–µ–º callback —Å nil –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è deadline –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        onSetDeadlineForTasks(nil)
        
        print("üóëÔ∏è –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è \(selectedTasksCount) –∑–∞–¥–∞—á(–∏)")
    }
    
    // MARK: - Notification Methods
    
    /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    private func requestNotificationPermission(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: \(error.localizedDescription)")
            }
            completion(granted)
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    private func checkNotificationPermission() {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.notificationPermissionGranted = settings.authorizationStatus == .authorized
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private func showNotificationPermissionAlert() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å alert –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è deadline
    private func createNotificationForDeadline(baseDate: Date, reminderOption: String) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á
        removeExistingNotifications()
        
        let notificationCenter = UNUserNotificationCenter.current()
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–º deadline
        createDeadlineNotification(date: baseDate, notificationCenter: notificationCenter)
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
        if reminderOption != "–Ω–µ—Ç" {
            let reminderDate = calculateReminderDate(baseDate: baseDate, reminderOption: reminderOption)
            createReminderNotification(date: reminderDate, reminderOption: reminderOption, deadlineDate: baseDate, notificationCenter: notificationCenter)
        }
        
        print("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è deadline: \(baseDate)")
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–º deadline
    private func createDeadlineNotification(date: Date, notificationCenter: UNUserNotificationCenter) {
        let content = UNMutableNotificationContent()
        content.title = "‚è∞ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫!"
        
        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let taskCount = selectedTasks.count
        let taskIds = selectedTasks.map { $0.id.uuidString }
        let taskTitles = selectedTasks.map { $0.title }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∑–∞–¥–∞—á
        if taskCount == 1 {
            content.body = "–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: \"\(taskTitles.first!)\""
        } else if taskCount <= 3 {
            let titles = taskTitles.joined(separator: ", ")
            content.body = "–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏: \(titles)"
        } else {
            let firstTasks = taskTitles.prefix(2).joined(separator: ", ")
            content.body = "–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏: \(firstTasks) –∏ –µ—â–µ \(taskCount - 2)"
        }
        
        content.sound = .default
        content.badge = NSNumber(value: taskCount)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        content.categoryIdentifier = "DEADLINE_CATEGORY"
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        content.userInfo = [
            "taskIds": taskIds,
            "taskTitles": taskTitles,
            "notificationType": "deadline"
        ]
        
        // –°–æ–∑–¥–∞–µ–º trigger –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: date)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "deadline_\(taskIds.joined(separator: "_"))_\(date.timeIntervalSince1970)",
            content: content,
            trigger: trigger
        )
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è deadline: \(error.localizedDescription)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ deadline —Å–æ–∑–¥–∞–Ω–æ –Ω–∞: \(date)")
            }
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
    private func createReminderNotification(date: Date, reminderOption: String, deadlineDate: Date, notificationCenter: UNUserNotificationCenter) {
        let content = UNMutableNotificationContent()
        content.title = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—Ä–∞–π–Ω–µ–º —Å—Ä–æ–∫–µ"
        
        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let taskCount = selectedTasks.count
        let taskIds = selectedTasks.map { $0.id.uuidString }
        let taskTitles = selectedTasks.map { $0.title }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∑–∞–¥–∞—á
        let timeUntilDeadline = reminderOption.replacingOccurrences(of: "–∑–∞ ", with: "—á–µ—Ä–µ–∑ ")
        
        if taskCount == 1 {
            content.body = "\(timeUntilDeadline) –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: \"\(taskTitles.first!)\""
        } else if taskCount <= 3 {
            let titles = taskTitles.joined(separator: "\n‚Ä¢ ")
            content.body = "\(timeUntilDeadline) –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n‚Ä¢ \(titles)"
        } else {
            let firstTasks = taskTitles.prefix(3).joined(separator: "\n‚Ä¢ ")
            content.body = "\(timeUntilDeadline) –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n‚Ä¢ \(firstTasks)\n‚Ä¢ –∏ –µ—â–µ \(taskCount - 3) –∑–∞–¥–∞—á(–∏)"
        }
        
        content.sound = .default
        content.badge = NSNumber(value: taskCount)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        content.categoryIdentifier = "REMINDER_CATEGORY"
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        content.userInfo = [
            "taskIds": taskIds,
            "taskTitles": taskTitles,
            "notificationType": "reminder",
            "reminderOption": reminderOption,
            "deadlineDate": deadlineDate.timeIntervalSince1970
        ]
        
        // –°–æ–∑–¥–∞–µ–º trigger –¥–ª—è –¥–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: date)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "reminder_\(taskIds.joined(separator: "_"))_\(date.timeIntervalSince1970)",
            content: content,
            trigger: trigger
        )
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: \(error.localizedDescription)")
            } else {
                print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞: \(date) (\(reminderOption))")
                print("üìù –ó–∞–¥–∞—á–∏: \(taskTitles.joined(separator: ", "))")
            }
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á
    private func removeExistingNotifications() {
        let taskIds = selectedTasks.map { $0.id.uuidString }
        
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            var identifiersToRemove: [String] = []
            
            for request in requests {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user info –¥–∞–Ω–Ω—ã–º
                let userInfo = request.content.userInfo
                if let notificationTaskIds = userInfo["taskIds"] as? [String] {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ - —É–¥–∞–ª—è–µ–º
                    if !Set(notificationTaskIds).isDisjoint(with: Set(taskIds)) {
                        identifiersToRemove.append(request.identifier)
                    }
                } else {
                    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–ø–æ identifier)
                    for taskId in taskIds {
                        if request.identifier.contains(taskId) {
                            identifiersToRemove.append(request.identifier)
                            break
                        }
                    }
                }
            }
            
            if !identifiersToRemove.isEmpty {
                UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: identifiersToRemove)
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ \(identifiersToRemove.count) —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á")
                print("üìã –£–¥–∞–ª–µ–Ω–Ω—ã–µ ID: \(identifiersToRemove)")
            }
        }
    }
    
    // MARK: - Helper Methods
    
    /// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    private func combineDateAndTime(date: Date, time: Date) -> Date {
        let calendar = Calendar.current
        let dateComponents = calendar.dateComponents([.year, .month, .day], from: date)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: time)

        var combinedComponents = DateComponents()
        combinedComponents.year = dateComponents.year
        combinedComponents.month = dateComponents.month
        combinedComponents.day = dateComponents.day
        combinedComponents.hour = timeComponents.hour
        combinedComponents.minute = timeComponents.minute
        combinedComponents.second = 0

        return calendar.date(from: combinedComponents) ?? date
    }
    
    /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    private func calculateReminderDate(baseDate: Date, reminderOption: String) -> Date {
        let calendar = Calendar.current
        var components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: baseDate)
        
        switch reminderOption {
        case "–∑–∞ 5 –º–∏–Ω—É—Ç":
            components.minute = components.minute! - 5
        case "–∑–∞ 10 –º–∏–Ω—É—Ç":
            components.minute = components.minute! - 10
        case "–∑–∞ 15 –º–∏–Ω—É—Ç":
            components.minute = components.minute! - 15
        case "–∑–∞ 20 –º–∏–Ω—É—Ç":
            components.minute = components.minute! - 20
        case "–∑–∞ 30 –º–∏–Ω—É—Ç":
            components.minute = components.minute! - 30
        case "–∑–∞ 1 —á–∞—Å":
            components.hour = components.hour! - 1
        case "–∑–∞ 2 —á–∞—Å–∞":
            components.hour = components.hour! - 2
        case "–∑–∞ 1 –¥–µ–Ω—å":
            components.day = components.day! - 1
        case "–∑–∞ 2 –¥–Ω—è":
            components.day = components.day! - 2
        default:
            break
        }
        
        return calendar.date(from: components) ?? baseDate
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π deadline
    func formatExistingDeadline(_ deadline: Date) -> String {
        let calendar = Calendar.current
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–µ 00:00)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: deadline)
        let hasSpecificTime = timeComponents.hour != 0 || timeComponents.minute != 0
        
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        
        if hasSpecificTime {
            formatter.timeStyle = .short
        } else {
            formatter.timeStyle = .none
        }
        
        return formatter.string(from: deadline)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private func setDefaultTime() {
        let calendar = Calendar.current
        let now = Date()
        
        if calendar.isDate(selectedDate, inSameDayAs: now) {
            // –î–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            selectedTime = calendar.date(byAdding: .hour, value: 1, to: now) ?? now
        } else {
            // –î–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 9:00
            selectedTime = calendar.date(bySettingHour: 9, minute: 0, second: 0, of: selectedDate) ?? selectedDate
        }
    }
    
    // MARK: - Computed Properties for UI
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π deadline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
    var hasExistingDeadline: Bool {
        return currentDeadline != nil || existingDeadline != nil
    }
}
